Prerequisites:
==============
1. Python Git: sudo apt-get install python-git
2. Google repo: https://source.android.com/source/downloading
3. Checked with Python v 2.7.12, but other should also work

About:
======
Gen3-test product is based on Renesas BSP and Xen hypervisor. It contains a set of features required to have
both Display and GPU support in several domains at the same time (device passthrough, PVDRM, VGPU, etc).

There are three domains which are running on top of Xen:
1. Generic machine independent control domain named "Domain-0". This initramfs based domain is responsible
for managing VMs only (create/destroy/reboot guest domains). There is no HW assigned to this domain.
2. Machine dependent driver domain named "DomD". Almost all HW are assigned to this domain.
As this domain is not 1:1 mapped, Xen controls IPMMU to do a proper address translations (IPA to PA) for DMA masters.
It also contains different para-virtualized (PV) backends running inside it in order to provide guest domains
(without HW assigned) with different services such as Audio, Display, Net, Block, etc.
3. Machine dependent simple guest domain named "DomU". It has different PV frontends running and
doesn't have any HW assigned except GPU. The latter is shared between "DomD" and "DomU" in current setup.

Build:
======
Our build system uses set of additional meta layers and tools.
1. Please, clone the following build scripts, master branch:

git clone https://github.com/xen-troops/build-scripts.git
cd build-scripts

2. In the build-scripts directory you will find a sample configuration
file xt-build-server.cfg:

cp xt-build-server.cfg xt-gen3-test.cfg

3. Edit it to fit your environment: the variables we need to change
are under [path] section. Please set:
 - workspace_base_dir: change it to point to the place where the build will happen
 - workspace_storage_base_dir: change it to where downloads and other files will be put

For example,

workspace_base_dir = /home/workspace_base
workspace_storage_base_dir = /home/workspace_storage_base

4. Run the build script for current stable release:

python ./build_prod.py --build-type dailybuild --machine MACHINE_NAME --product gen3-test --with-local-conf --config xt-gen3-test.cfg

Hereafter the supported MACHINE_NAMEs are:
- salvator-x-h3  (Salvator-X board with H3 SoC installed)
- salvator-x-m3  (Salvator-X board with M3 SoC installed)
- salvator-x-m3n (Salvator-XS board with M3N SoC installed)

5. After that you will have all the build environment setup at workspace_base_dir
directory.

6. Download and copy EVA proprietary packages to your local filesystem at some directory:

For example,

 - R-Car_Gen3_Series_Evaluation_Software_Package_for_Linux-20170427.zip
 - R-Car_Gen3_Series_Evaluation_Software_Package_of_Linux_Drivers-20170427.zip

7. Edit local.conf:

workspace_base/build/conf/local.conf

and append the following:

XT_RCAR_EVAPROPRIETARY_DIR = "/path/to/eva/archives"

with the correct path to the archives set.

8. Now, to build the images you can run the same command as in 4) but with
additional argument --continue-build:

python ./build_prod.py --build-type dailybuild --machine MACHINE_NAME --product gen3-test --with-local-conf --config xt-gen3-test.cfg --continue-build

9. You are done. The artifacts of the build are located at workspace_base directory:
workspace_base
├── build
│   ├── conf
│   │
│   └── tmp
│       ├── log
│       │   ├── cooker
│       │   │   └── MACHINE_NAME
│       │   │
│       │   ├── dom0-image-thin-initramfs
│       │   │   └── cooker
│       │   │       └── generic-armv8-xt
│       │   │
│       │   ├── domd-image-weston
│       │   │   └── cooker
│       │   │       └── MACHINE_NAME-xt
│       │   │
│       │   ├── domu-image-weston
│       │       └── cooker
│       │           └── MACHINE_NAME-xt
│       │
│       ├── deploy
│       │   ├── dom0-image-thin-initramfs
│       │   │   └── images
│       │   │       └── generic-armv8-xt
│       │   │
│       │   ├── domd-image-weston
│       │   │   └── images
│       │   │       └── MACHINE_NAME-xt
│       │   │
│       │   ├── domu-image-weston
│       │   │   └── images
│       │   │       └── MACHINE_NAME-xt
│       │   │
│       │   └── mk_sdcard_image.sh
│       │
│       └── work
│           └── x86_64-xt-linux
│               ├── dom0-image-thin-initramfs
│               │   └── 1.0-r0
│               │       └── repo
│               │           ├── build
│               │           ├── meta-linaro
│               │           ├── meta-openembedded
│               │           ├── meta-xt-images-generic-armv8
│               │           ├── meta-virtualization
│               │           ├── meta-xt-images-extra
│               │           ├── meta-xt-prod-extra
│               │           ├── meta-xt-images-domx
│               │           ├── poky
│               │
│               ├── domd-image-weston
│               │   └── 1.0-r0
│               │       └── repo
│               │           ├── build
│               │           ├── meta-clang
│               │           ├── meta-linaro
│               │           ├── meta-openembedded
│               │           ├── meta-renesas
│               │           ├── meta-selinux
│               │           ├── meta-virtualization
│               │           ├── meta-xt-images-domx
│               │           ├── meta-xt-images-extra
│               │           ├── meta-xt-images-rcar-gen3
│               │           ├── meta-xt-images-vgpu
│               │           ├── meta-xt-prod-extra
│               │           ├── meta-xt-prod-vgpu
│               │           ├── poky
│               │           ├── proprietary
│               │
│               ├── domu-image-weston
│               │   └── 1.0-r0
│               │       └── repo
│               │           ├── build
│               │           ├── meta-clang
│               │           ├── meta-linaro
│               │           ├── meta-openembedded
│               │           ├── meta-renesas
│               │           ├── meta-selinux
│               │           ├── meta-virtualization
│               │           ├── meta-xt-images-domx
│               │           ├── meta-xt-images-extra
│               │           ├── meta-xt-images-rcar-gen3
│               │           ├── meta-xt-images-vgpu
│               │           ├── meta-xt-prod-extra
│               │           ├── meta-xt-prod-vgpu
│               │           ├── poky
│               │           ├── proprietary
│               │
│               ├── xt-image
│
├── meta-xt-images
├── meta-xt-prod-gen3-test
├── xt-distro

Images are located at:
- Domain-0:
workspace_base/build/tmp/deploy/dom0-image-thin-initramfs/images/generic-armv8-xt
- DomD:
workspace_base/build/tmp/deploy/domd-image-weston/images/MACHINE-NAME-xt
- DomU:
workspace_base/build/tmp/deploy/domu-image-weston/images/MACHINE-NAME-xt

Build logs are located at:
- Domain-0:
workspace_base/build/tmp/log/dom0-image-thin-initramfs/cooker/generic-armv8-xt
- DomD:
workspace_base/build/tmp/log/domd-image-weston/cooker/MACHINE-NAME-xt
- DomU:
workspace_base/build/tmp/log/domu-image-weston/cooker/MACHINE-NAME-xt

10. If one wants to build any domain's images by hand, at the time of development
for instance, it is possible by going into desired directory and using poky to build:

- For building Domain-0:
cd workspace_base/build/tmp/work/x86_64-xt-linux/dom0-image-thin-initramfs/1.0-r0/repo/
- For building DomD:
cd workspace_base/build/tmp/work/x86_64-xt-linux/domd-image-weston/1.0-r0/repo/
- For building DomU:
cd workspace_base/build/tmp/work/x86_64-xt-linux/domu-image-weston/1.0-r0/repo/

source poky/oe-init-build-env

- For building Domain-0:
bitbake core-image-thin-initramfs

- For building DomD or DomU:
bitbake core-image-weston

Usage:
======
It is possible to run system either using TFTP boot with NFS root or keeping
all images on a storage device such as eMMC or SD card.

Different helpers scripts and docs are located at:
workspace_base/meta-xt-prod-gen3-test/doc/

[TODO: Should be completed]
